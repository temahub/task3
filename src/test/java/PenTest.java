import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Field;

import static org.testng.Assert.*;

public class PenTest {

    private final String color = "Green";
    private final String nothing = "";
    private final String word = "abcdefg";
    private final String partOfWord = "abcdef";
    private final String wordWithSpaces = " a b c d e f g ";
    private final String partOfWordWithSpaces = " a b c d e f ";
    private final int inkMinus = -1, inkZero = 0, ink5 = 5, ink6 = 6;
    private final double letterSizeMinus = -1.0, letterSizeZero = 0, letterSizePlus = 0.8;
    private Pen penInkContainerValueZero;
    private Pen penWord;
    private Pen penPartOfWord;

    @BeforeMethod
    public void setUp() {
        penInkContainerValueZero = new Pen(inkZero, letterSizePlus, color);
        penWord = new Pen(ink6, letterSizePlus, color);
        penPartOfWord = new Pen(ink5, letterSizePlus, color);
    }

    @Test
    public void testPenConstructorPositiveOneParametr(){
        try {
            Pen pen = new Pen(inkZero);
            Field fInkContainerValue = pen.getClass().getDeclaredField("inkContainerValue");
            fInkContainerValue.setAccessible(true);

            assertEquals(inkZero, (int) fInkContainerValue.get(penInkContainerValueZero));

        }catch (NoSuchFieldException | IllegalAccessException e){
            System.err.println(e);
        }
    }

    @Test
    public void testPenConstructorPositiveTwoParametr(){
        try {
            Pen pen = new Pen(inkZero, letterSizePlus);
            Field fInkContainerValue = pen.getClass().getDeclaredField("inkContainerValue");
            Field fSizeLetter = pen.getClass().getDeclaredField("sizeLetter");
            fInkContainerValue.setAccessible(true);
            fSizeLetter.setAccessible(true);

            assertEquals(inkZero, (int) fInkContainerValue.get(penInkContainerValueZero));
            assertEquals(letterSizePlus, (double) fSizeLetter.get(penInkContainerValueZero));

        }catch (NoSuchFieldException | IllegalAccessException e){
            System.err.println(e);
        }
    }

    @Test
    public void testPenConstructorPositiveThreeParametr(){
        try {
            Field fInkContainerValue = penInkContainerValueZero.getClass().getDeclaredField("inkContainerValue");
            Field fSizeLetter = penInkContainerValueZero.getClass().getDeclaredField("sizeLetter");
            Field fColor = penInkContainerValueZero.getClass().getDeclaredField("color");
            fInkContainerValue.setAccessible(true);
            fSizeLetter.setAccessible(true);
            fColor.setAccessible(true);

            assertEquals(inkZero, (int) fInkContainerValue.get(penInkContainerValueZero));
            assertEquals(letterSizePlus, (double) fSizeLetter.get(penInkContainerValueZero));
            assertEquals(color, (String) fColor.get(penInkContainerValueZero));
        }catch (NoSuchFieldException | IllegalAccessException e){
            System.err.println(e);
        }

    }

    @Test(expectedExceptions = Exception.class)
    public void testPenConstructorInkNegativeMinus(){
        new Pen(inkMinus, letterSizePlus, color);

    }

    @Test(expectedExceptions = Exception.class)
    public void testPenConstructorSizeLetterNegativeMinus(){
        new Pen(ink5, letterSizeMinus, color);

    }

    @Test(expectedExceptions = Exception.class)
    public void testPenConstructorNegativeZero(){
        new Pen(ink5, letterSizeZero, color);

    }

    @Test(expectedExceptions = Exception.class)
    public void testPenConstructorNegativeNull(){
        new Pen(ink5, letterSizePlus, null);
    }

    @Test
    public void testPenWriteInkContainerValueZero() {
        assertEquals(nothing, penInkContainerValueZero.write(word));
    }

    @Test
    public void testPenWriteReturnWord(){
        assertEquals(word, penWord.write(word));
    }

    @Test
    public void testPenWriteReturnPartOfWord(){
        assertEquals(partOfWord, penPartOfWord.write(word));
    }

    @Test
    public void testPenWriteReturnWordWithSpaces(){
        assertEquals(wordWithSpaces, penWord.write(wordWithSpaces));
    }

    @Test
    public void testPenWriteReturnPartOfWordWithSpaces(){
        assertEquals(partOfWordWithSpaces, penPartOfWord.write(wordWithSpaces));
    }

    @Test
    public void testPenGetColor() {
        assertEquals(color, penWord.getColor());
    }

    @Test
    public void testPenIsWorkTrue() {
        assertTrue(penWord.isWork());
    }

    @Test
    public void testPenIsWorkFalse(){
        assertFalse(penInkContainerValueZero.isWork());
    }

    @Test
    public void testPenDoSomethingElse() {
        PrintStream defaultOut = System.out;
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent));
        penWord.doSomethingElse();
        assertEquals(color, outContent.toString().replace(System.getProperty("line.separator"), nothing));
        System.setOut(defaultOut);
    }
}