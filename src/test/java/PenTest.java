import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.testng.Assert.*;

public class PenTest {

    private final String color = "Green";
    private final String nothing = "";
    private final String word = "abcdefg";
    private final String partOfWord = "abcdef";
    private final String wordWithSpaces = " a b c d e f g ";
    private final String partOfWordWithSpaces = " a b c d e f ";
    private Pen penInkContainerValueZero;
    private Pen penWord;
    private Pen penPartOfWord;

    @BeforeMethod
    public void setUp() {
        penInkContainerValueZero = new Pen(0, 1.0, color);
        penWord = new Pen(6, 0.8, color);
        penPartOfWord = new Pen(5, 0.8, color);
    }

    @Test
    public void testPenConstructorPositive(){
        new Pen(Integer.MIN_VALUE);
        new Pen(Integer.MAX_VALUE);
        new Pen(Integer.MIN_VALUE, Double.MIN_VALUE);
        new Pen(Integer.MAX_VALUE, Double.MAX_VALUE);
        new Pen(Integer.MIN_VALUE, Double.MIN_VALUE, color);
        new Pen(Integer.MAX_VALUE, Double.MAX_VALUE, color);
    }

    @Test(expectedExceptions = Exception.class)
    public void testPenConstructorNegativeMinus(){
        new Pen(-1, -1.0, color);

    }

    @Test(expectedExceptions = Exception.class)
    public void testPenConstructorNegativeZero(){
        new Pen(1, 0, color);

    }

    @Test(expectedExceptions = Exception.class)
    public void testPenConstructorNegativeNull(){
        new Pen(1, 1.0, null);
    }

    @Test
    public void testPenWriteInkContainerValueZero() {
        assertEquals(nothing, penInkContainerValueZero.write(word));
    }

    @Test
    public void testPenWriteReturnWord(){
        assertEquals(word, penWord.write(word));
    }

    @Test
    public void testPenWriteReturnPartOfWord(){
        assertEquals(partOfWord, penPartOfWord.write(word));
    }

    @Test
    public void testPenWriteReturnWordWithSpaces(){
        assertEquals(wordWithSpaces, penWord.write(wordWithSpaces));
    }

    @Test
    public void testPenWriteReturnPartOfWordWithSpaces(){
        assertEquals(partOfWordWithSpaces, penPartOfWord.write(wordWithSpaces));
    }

    @Test
    public void testPenGetColor() {
        assertEquals(color, penWord.getColor());
    }

    @Test
    public void testPenIsWorkTrue() {
        assertTrue(penWord.isWork());
    }

    @Test
    public void testPenIsWorkFalse(){
        assertFalse(penInkContainerValueZero.isWork());
    }

    @Test
    public void testPenDoSomethingElse() {
        PrintStream defaultOut = System.out;
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent));
        penWord.doSomethingElse();
        assertEquals(color, outContent.toString().replace(System.getProperty("line.separator"), nothing));
        System.setOut(defaultOut);
    }
}